=== CentOS ===
###
IP сервера: 5.200.35.217
ПОльзователь: deploy
Пароль к серверу: express880
Пароль к postgres: express9090
###

# Версия системы:
$ cat /etc/centos-release

# Инсталим репозиторий дистибутивов:
$ yum install -y epel-release

## Настройки безопасности в CentOS

# Переключаем SELinux в режим "permissive" (если оставить "enforcing", то не будет работать "proxy_pass")
$ sudo sestatus | grep -i mode
> Current mode:                   enforcing
> Mode from config file:          enforcing

# Переключаем с enforcement на permissive
$ sudo setenforce 0
> Current mode:                   permissive
> Mode from config file:          enforcing

# Предыдущие команды временно отключают SELinux, нам же нужно сохранить статус после ребута:
$ sudo vim /etc/sysconfig/selinux | sudo vim /etc/selinux/config
# и изменяем параметр SELINUX=enforcing на SELINUX=permissive

# Можно полностью отключить SELinux:
> SELINUX=disabled

# Открываем 80, 443 и 8080 порты в фаерволе CentOS:
$ sudo firewall-cmd --permanent --zone=public --add-service=http
$ sudo firewall-cmd --permanent --zone=public --add-service=https
$ sudo firewall-cmd --permanent --add-port=8080/tcp
$ sudo firewall-cmd --permanent --add-port=3000/tcp
$ sudo firewall-cmd --reload

# Переводим веб-сервер в "production"
# До перезагрузки (если требуется однократно)
$ export NODE_ENV=production
# С сохранением настройки:
$ vim /etc/environment
> NODE_ENV=production 

# Смотрим инфу по открытым портам:
$ netstat -tln

# Обновляемся:
$ yum -y update && systemctl reboot

# Инсталим веб-сервер nginx
$ yum install -y nginx

# Команды управления веб-сервером nginx:
$ systemctl start nginx
$ systemctl stop nginx
$ systemctl reload nginx
$ systemctl restart nginx
$ systemctl status nginx

# Данной командой запускаем nginx после перезагрузки системы:
$ systemctl enable nginx

# Смотрим свой ip-адрес и открываем его в браузере:
$ ip addr

## Доустанавливаем программы:
$ yum install vim
$ yum install mc

## Создаём нового юзера:
$ adduser deploy | useradd deploy
$ passwd deploy
$ usermod -aG wheel deploy
$ sudo su - deploy
$ whoami -> 'deploy'

# Добавляем пользователю пароль:
$ passwd <username>
> express880

## Добавляем ключи
$ ssh-keygen -t rsa
$ chmod 755 ~/.ssh
$ touch .ssh/authorized_keys
$ chmod 644 .ssh/authorized_keys

# Вставляем свой ключ
$ vim .ssh/authorized_keys

## Устанавливаем Node.js
# Сливаем себе офф. репу:
$ curl --silent --location https://rpm.nodesource.com/setup_7.x | bash -
$ curl -sL https://rpm.nodesource.com/setup_11.x | bash -

# Инсталим ноду:
$ yum install -y nodejs

# Проверяем установку:
$ node -v
> v7.10.0
$ npm -v
> 4.2.0

## Устанавливаем прокси-вервер PM2
# http://pm2.keymetrics.io/docs/usage/quick-start/
$ npm install -g pm2

# Переходим в каталог с проектом:
$ cd /usr/share/nginx/www/staging.stroysnab.com/ | $ cd /usr/share/nginx/www/stroysnab.com/
$ sudo su
$ pm2 kill
$ rm -rf node_modules
$ sudo npm install
# pm2.json:
/*
{
  "apps": [
    {
      "name": "stroysnab.com",
      "script": "bin/www",
      "watch": [
        "views",
        "public",
        "routes"
      ],
      "env": {
        "NODE_ENV": "development"
      },
      "env_production": {
        "NODE_ENV": "production"
      },
      "log_date_format": "MM-DD-YYYY HH:mm Z",
      "error_file": "/log/pm2_error.log",
      "out_file": "/log/pm2_out.log"
    }
  ]
}
*/
# Добавляем проект в PM2:
$ sudo su
$ pm2 start --name absolute-partner.ru pm2.json | $ pm2 start --name absolute-partner.ru pm2.json

# Обязательно сохраняем:
$ pm2 save

# Добавляем наше приложение в автозапуск (при reboot)
$ pm2 startup
$ pm2 save

$ pm2 stop all
$ pm2 ls

# Отключаем автозапуск приложения:
$ pm2 unstartup systemd

# Управление сервером PM2
$ pm2 stop all           # Stop all processes
$ pm2 restart all        # Restart all processes
$ pm2 reload all         # Will 0s downtime reload (for NETWORKED apps)
$ pm2 gracefulReload all # Send exit message then reload (for networked apps)
$ pm2 stop 0             # Stop specific process id
$ pm2 restart 0          # Restart specific process id
$ pm2 delete 0           # Will remove process from pm2 list
$ pm2 delete all         # Will remove all processes from pm2 list

# Мониторинг состояния сервера PM2:
$ sudo pm2 show <id|name>
$ sudo pm2 logs staging.stroysnab.com [--lines 1000]
$ sudo pm2 monit

# Добавляем репу Yarn:
$ sudo wget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo

# Инсталим yarn:
$ sudo yum -y install yarn

# Проверяем установку:
$ yarn --version
> 0.24.5

## Установка Postgres
## https://youtu.be/y2haO82SPd4
$ sudo su
$ vim /etc/yum.repos.d/CentOS-Base.repo
> [base]
> exclude=postgresql*
> [updates]
> exclude=postgresql*

$ yum -y install https://yum.postgresql.org/9.6/redhat/rhel-7-x86_64/pgdg-redhat96-9.6-3.noarch.rpm
$ yum list available | grep postgresql96
$ yum -y install postgresql96*

# Инициализируем БД:
$ /usr/pgsql-9.6/bin/postgresql96-setup initdb

# Конфигурируем:
$ vim /var/lib/pgsql/9.6/data/postgresql.conf
# Раскомментируем строчку:
> listen_addresses = 'localhost'
# Настройка MD5 шифрования для аутентификации пользователя postgres:
% vim /var/lib/pgsql/9.6/data/pg_hba.conf
> local       all all peer(md5)
> host        all all 127.0.0.1/32 ident(md5)
> host        all all ::1/128 ident(md5)
$ systemctl restart postgresql-9.6.service

# Добавляем сервис базы в автозагрузку (создаём демона):
$ systemctl enable postgresql-9.6.service

# Запускаем postgres:
$ systemctl start postgresql-9.6.service
# и проверяем статус сервера:
$ systemctl status postgresql-9.6

# Переключаемся на пользователя postgres
$ sudo su
> express880
$ su postgres

# Заходим в терминал управления Postgres:
$ cd
$ psql
> express9090

# Задаём пользователю новый пароль:
$ \password
> express9090

# Создаём dump
$ pg_dump --format=c -U postgres stroysnab_production > stroysnab_production.dump
# вводим пароль пользователя postgres, файл создастся в текущей директории.

# Dump отдельных таблиц:

pg_dump --format=c -U postgres --dbname stroysnab_production --table brands > stroysnab_production_brands.dump
pg_dump --format=c -U postgres --dbname stroysnab_production --table orders > stroysnab_production_orders.dump

pg_dump --format=c -U postgres --dbname stroysnab_production --table groups > stroysnab_production_groups.dump
pg_dump --format=c -U postgres --dbname stroysnab_production --table products > stroysnab_production_products.dump
pg_dump --format=c -U postgres --dbname stroysnab_production --table brands > stroysnab_production_brands.dump

> express9090

# Восстанавливаем dump
# Предварительно нужно удалить данные из таблиц!
$ pg_restore -U postgres -d stroysnab_production -Fc stroysnab_production.dump
> express9090

# Восстановление отдельных таблиц:
# Предварительно нужно удалить те таблицы, которые необходимо восстановить, т.к. в dump уже содержится команда CREATE TABLE:
$ DROP TABLE brands;

$ pg_restore -U postgres -d stroysnab_production -t brands -Fc stroysnab_production_brands.dump
$ pg_restore -U postgres -d stroysnab_production -t orders -Fc stroysnab_production_orders.dump
$ pg_restore -U postgres -d stroysnab_production -t groups -Fc stroysnab_production_groups.dump
$ pg_restore -U postgres -d stroysnab_production -t availabilitys -Fc stroysnab_production_availabilitys.dump
$ pg_restore -U postgres -d stroysnab_production -t prices -Fc stroysnab_production_prices.dump
$ pg_restore -U postgres -d stroysnab_production -t products -Fc stroysnab_production_products.dump
> express9090

# Работа со словарями в Postgres
# Каталог с общими данными Postgres - /usr/local/share/postgresql (точно узнать его можно с помощью команды pg_config --sharedir). В каталоге имеется директория tsearch_data в которой находятся все словари.

## Установка MongoDB
## https://youtu.be/FPyWxBqA3EQ
$ sudo vim /etc/yum.repos.d/mongodb-org-3.4.repo

# Добавляем в созданый файл следующую информацию:
/*
[mongodb-org-3.4]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc
*/
# можно взять с оф.сайта MongoDB - https://docs.mongodb.com/master/tutorial/install-mongodb-on-red-hat/

# Инсталим последнюю стабильную версию mongodb:
$ sudo yum install -y mongodb-org

# Стартуем:
$ sudo systemctl start mongod.service | sudo service mongod start

# Проверяем по логу старт монги:
$ sudo cat /var/log/mongodb/mongod.log | sudo tail -f /var/log/mongodb/mongod.log

# Смотрим статус:
$ sudo systemctl status mongod.service

# Включаем автозапуск сервиса после перезагрузки:
$ sudo systemctl enable mongod.service

# Конектимся к MongoDB:
$ mongo
> show dbs
> show users

# Администрирование:
$ sudo systemctl start mongod.service
$ sudo systemctl stop mongod.service
$ sudo systemctl restart mongod.service
$ sudo systemctl status mongod.service

## SSL
# https://deviantengineer.com/2015/05/nginx-reverseproxy-centos7/

## Последовательность действий при развертывании проекта:
# Скачиваем проект с git-репозитория
$ yarn install
$ yarn run production
$ pm2 start --name stroysnab.com pm2.json
$ pm2 save
$ pm2 startup
$ pm2 save
$ knex migrate:latest
$ knex seed:run (опционально)
